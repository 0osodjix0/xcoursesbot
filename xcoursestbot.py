### BLOCK 1: BASE SETUP ###
import random 
import os
import logging
import sqlite3
logging.basicConfig()
logger = logging.getLogger('sqlalchemy.engine')
logger.setLevel(logging.INFO)
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv
from datetime import datetime
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.utils.media_group import MediaGroupBuilder

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_NAME = os.getenv('DATABASE_NAME', 'bot.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

def adapt_datetime(dt):
    return dt.isoformat()

def convert_datimestamp(b):
    return datetime.fromisoformat(b.decode())

sqlite3.register_adapter(datetime, adapt_datetime)
sqlite3.register_converter("timestamp", convert_datimestamp)

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(
            DATABASE_NAME,
            detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES
        )
        self.conn.execute("PRAGMA foreign_keys = ON")
        self.conn.row_factory = sqlite3.Row
        self._init_tables()

    def _init_tables(self):
        with self.conn:
            # Users table
            self.conn.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL,
                current_course INTEGER,
                registered_at timestamp DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(current_course) REFERENCES courses(course_id) ON DELETE SET NULL
            )''')

            # Courses table
            self.conn.execute('''CREATE TABLE IF NOT EXISTS courses (
                course_id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT UNIQUE NOT NULL,
                description TEXT,
                media_id TEXT
            )''')

            # Modules table
            self.conn.execute('''CREATE TABLE IF NOT EXISTS modules (
                module_id INTEGER PRIMARY KEY AUTOINCREMENT,
                course_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                media_id TEXT,
                FOREIGN KEY(course_id) REFERENCES courses(course_id) ON DELETE CASCADE
            )''')

            # Tasks table
            self.conn.execute('''CREATE TABLE IF NOT EXISTS tasks (
                task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                module_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                file_id TEXT,
                FOREIGN KEY(module_id) REFERENCES modules(module_id) ON DELETE CASCADE
            )''')

            # Submissions table —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            self.conn.execute('''CREATE TABLE IF NOT EXISTS submissions (
                submission_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                task_id INTEGER NOT NULL,
                status TEXT DEFAULT 'pending' CHECK(status IN ('pending', 'accepted', 'rejected')),
                score INTEGER CHECK(score BETWEEN 0 AND 100),
                submitted_at timestamp DEFAULT CURRENT_TIMESTAMP,
                file_id TEXT,
                content TEXT,
                FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY(task_id) REFERENCES tasks(task_id) ON DELETE CASCADE
            )''')

    def __enter__(self):
        return self.conn.cursor()
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type:
            self.conn.rollback()
        else:
            self.conn.commit()
        self.conn.close()

def init_db():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ Database
    pass

### BLOCK 3: STATES AND KEYBOARDS ###
class Form(StatesGroup):
    full_name = State()
    course_selection = State()

class AdminForm(StatesGroup):
    add_course_title = State()
    add_course_description = State()
    add_course_media = State()
    add_module_title = State()
    add_module_media = State()
    add_task_title = State()
    add_task_content = State()
    add_task_media = State()
    delete_course = State()

def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def cancel_button():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])


### BLOCK 4: USER HANDLERS (FIXED) ###
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    with Database() as cursor:
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
        user = cursor.fetchone()
    
    if user:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[1]}!", reply_markup=main_menu())
    else:
        await message.answer("üìù –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –º–æ–≥ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ::", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.full_name)

@dp.message(Form.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)")
        return
    
    try:
        with Database() as cursor:
            cursor.execute(
                "INSERT INTO users (user_id, full_name) VALUES (?, ?)",
                (message.from_user.id, message.text)
            )
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu())
        await state.clear()
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await state.clear()

### BLOCK 4.1: MEDIA HANDLERS ###
async def handle_media(message: Message, state: FSMContext):
    media_id = None
    if message.photo:
        media_id = message.photo[-1].file_id
    elif message.document:
        media_id = message.document.file_id
    
    if media_id:
        await state.update_data(media_id=media_id)
    return media_id

### BLOCK 5: COURSE HANDLERS (FIXED) ###
def courses_kb():
    with Database() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=f"üìò {course[1]}",
            callback_data=f"course_{course[0]}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == ("üìö –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å"))
async def show_courses(message: types.Message):
    with Database() as cursor:
        cursor.execute(
            "SELECT courses.title FROM users "
            "LEFT JOIN courses ON users.current_course = courses.course_id "
            "WHERE users.user_id = ?", 
            (message.from_user.id,)
        )
        current_course = cursor.fetchone()
    
    text = "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –º–æ–¥—É–ª–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏. –í—ã–ø–æ–ª–Ω—è–π –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! üöÄ \n\n"
    if current_course and current_course[0]:
        text += f"üéØ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_course[0]}\n\n"
    text += "üëá –í—ã–±–µ—Ä–∏ —Å–≤–æ–π:"
    
    await message.answer(
        text,
        reply_markup=
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", callback_data="select_course")]]
        )
    )

@dp.callback_query(F.data == ("select_course"))
async def select_course_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
        reply_markup=courses_kb()
    )

### BLOCK 6: NAVIGATION AND CANCEL ###
@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(callback.from_user.id) == ADMIN_ID:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer(
            "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
            reply_markup=admin_menu()
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu()
        )
### BLOCK 5.1: COURSE SELECTION FIX ###
@dp.callback_query(F.data.startswith("course_"))
async def select_course(callback: types.CallbackQuery):
    try:
        course_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        with Database() as cursor:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "UPDATE users SET current_course = ? WHERE user_id = ?",
                (course_id, user_id)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
            cursor.execute(
                "SELECT title, media_id FROM courses WHERE course_id = ?",
                (course_id,)
            )
            course = cursor.fetchone()
        
        if not course:
            raise ValueError("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:"
        kb = modules_kb(course_id)
        
        if course[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
            await callback.message.delete()
            await callback.message.answer_photo(
                course[1],
                caption=text,
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=kb
            )
            
    except Exception as e:
        logger.error(f"Error in select_course: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞",
            reply_markup=main_menu()
        )

    ### BLOCK 6: COURSE SELECTION HANDLERS ###
@dp.callback_query(F.data == "select_course")
async def select_course_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:",
        reply_markup=courses_kb()
    )

@dp.callback_query(F.data.startswith("course_"))
async def select_course(callback: types.CallbackQuery):
    try:
        course_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        with Database() as cursor:
            cursor.execute(
                "UPDATE users SET current_course = ? WHERE user_id = ?",
                (course_id, user_id)
            )
            cursor.execute(
                "SELECT title, media_id FROM courses WHERE course_id = ?",
                (course_id,)
            )
            course = cursor.fetchone()
        
        text = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:"
        kb = modules_kb(course_id)
        
        if course[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
            await callback.message.delete()
            await callback.message.answer_photo(
                course[1],
                caption=text,
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                text,
                reply_markup=kb
            )
            
    except Exception as e:
        logger.error(f"Error in select_course: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞",
            reply_markup=main_menu()
        )

### BLOCK 6: MODULE SYSTEM FIX ###
@dp.callback_query(F.data.startswith("module_"))
async def module_selected(callback: types.CallbackQuery):
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ module_id
        module_id = int(callback.data.split("_")[1])
        
        with Database() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –º–æ–¥—É–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            cursor.execute("SELECT course_id FROM modules WHERE module_id = ?", (module_id,))
            course_data = cursor.fetchone()
            
            if not course_data:
                await callback.answer("‚ùå –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            course_id = course_data[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            cursor.execute("SELECT title FROM modules WHERE module_id = ?", (module_id,))
            module_data = cursor.fetchone()
            
            if not module_data:
                await callback.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            module_title = module_data[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            cursor.execute("SELECT task_id, title FROM tasks WHERE module_id = ?", (module_id,))
            tasks = cursor.fetchall()

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback
        unique_id = random.randint(1000, 9999)
        builder = InlineKeyboardBuilder()
        
        if tasks:
            for task in tasks:
                builder.button(
                    text=f"üìù {task[1]}", 
                    callback_data=f"task_{task[0]}"
                )
        else:
            await callback.answer("‚ÑπÔ∏è –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return
            
        builder.button(
            text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º", 
            callback_data=f"back_to_modules_{course_id}_{unique_id}"
        )
        builder.adjust(1)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ–¥–∏–∞
        try:
            await callback.message.edit_text(
                f"üìÇ –ú–æ–¥—É–ª—å: {module_title}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"Message edit error: {str(e)}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")

    except Exception as e:
        logger.error(f"Module error: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è")

### BLOCK 6.1: BACK TO MODULES FIX ###
@dp.callback_query(F.data.startswith("back_to_modules_"))
async def back_to_modules(callback: CallbackQuery):
    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ course_id
        parts = callback.data.split("_")
        course_id = int(parts[3])  # –ù–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        
        with Database() as cursor:
            cursor.execute(
                "SELECT title FROM courses WHERE course_id = ?", 
                (course_id,)
            )
            course_data = cursor.fetchone()
            
            if not course_data:
                await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            course_title = course_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–¥—É–ª–µ–π
        kb = modules_kb(course_id)
        
        try:
            await callback.message.edit_text(
                f"üìö –ö—É—Ä—Å: {course_title}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
                reply_markup=kb
            )
        except TelegramBadRequest:
            await callback.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∞–∫—Ç—É–∞–ª–µ–Ω")
            
    except Exception as e:
        logger.error(f"Back to modules error: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

### BLOCK 6.2: MODULES KEYBOARD FIX ###
def modules_kb(course_id: int):
    try:
        with Database() as cursor:
            cursor.execute(
                "SELECT module_id, title FROM modules WHERE course_id = ?",
                (course_id,)
            )
            modules = cursor.fetchall()
        
        builder = InlineKeyboardBuilder()
        
        if modules:
            for module in modules:
                builder.button(
                    text=f"üìÇ {module[1]}",
                    callback_data=f"module_{module[0]}"
                )
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –º–æ–¥—É–ª–µ–π –Ω–µ—Ç
            builder.button(
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π", 
                callback_data="no_modules"
            )
            
        builder.button(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", 
            callback_data="back_to_courses"
        )
        builder.adjust(1)
        
        return builder.as_markup()
        
    except Exception as e:
        logger.error(f"Modules keyboard error: {str(e)}")
        return InlineKeyboardBuilder().as_markup()

### BLOCK 8.1: SUPPORT SYSTEM ###
@dp.message(F.text == ("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def support_request(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", url=f"tg://user?id={ADMIN_ID}")
    await message.answer(
        "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=builder.as_markup()
    )

### BLOCK 9: TASK SUBMISSION SYSTEM FIX (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ###
class TaskStates(StatesGroup):
    waiting_for_solution = State()

@dp.callback_query(F.data.startswith("task_"))
async def task_selected(callback: types.CallbackQuery, state: FSMContext):
    try:
        task_id = int(callback.data.split("_")[1])
        
        with Database() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            cursor.execute(
                "SELECT title, content, file_id FROM tasks WHERE task_id = ?",
                (task_id,)
            )
            task = cursor.fetchone()
            
            if not task:
                await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ—à–µ–Ω–∏—è
            cursor.execute(
                "SELECT status, score FROM submissions "
                "WHERE user_id = ? AND task_id = ?",
                (callback.from_user.id, task_id)
            )
            submission = cursor.fetchone()

        text = f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task['title']}\n\n{task['content']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task['file_id']:
            try:
                await callback.message.answer_document(task['file_id'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏—è: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–∏—è
        if submission:
            text += f"\n\n–°—Ç–∞—Ç—É—Å: {submission['status']}\n–û—Ü–µ–Ω–∫–∞: {submission['score'] or '–Ω–µ—Ç'}"
            await callback.message.answer(text)
        else:
            await callback.message.answer(
                text + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:",
                reply_markup=cancel_button()
            )
            await state.set_state(TaskStates.waiting_for_solution)
            await state.update_data(task_id=task_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è")

@dp.message(TaskStates.waiting_for_solution, F.content_type.in_({'text', 'document', 'photo'}))
async def process_solution(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data['task_id']
    user_id = message.from_user.id
    
    try:
        file_ids = []
        content = None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.content_type == 'text':
            content = message.text
        elif message.document:
            file_ids.append(f"doc:{message.document.file_id}")
        elif message.photo:
            file_ids.append(f"photo:{message.photo[-1].file_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –ë–î
        with Database() as cursor:
            cursor.execute("BEGIN TRANSACTION")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ
            cursor.execute(
                "SELECT 1 FROM submissions WHERE user_id = ? AND task_id = ?",
                (user_id, task_id)
            )
            if cursor.fetchone():
                await message.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
                cursor.execute("ROLLBACK")
                return

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute(
                """INSERT INTO submissions 
                (user_id, task_id, submitted_at, file_id, content)
                VALUES (?, ?, ?, ?, ?)""",
                (user_id, task_id, datetime.now().isoformat(), ",".join(file_ids), content)
            )
            cursor.execute("COMMIT")
        
        await message.answer("‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        await notify_admin(task_id, user_id)

    except sqlite3.IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")
    finally:
        await state.clear()

async def notify_admin(task_id: int, user_id: int):
    try:
        if not ADMIN_ID:
            logger.error("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return

        with Database() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cursor.execute(
                """SELECT s.content, s.file_id, u.full_name, t.title 
                FROM submissions s
                JOIN users u ON s.user_id = u.user_id
                JOIN tasks t ON s.task_id = t.task_id
                WHERE s.task_id = ? AND s.user_id = ?""",
                (task_id, user_id)
            )
            submission = cursor.fetchone()

            if not submission:
                logger.error(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: task_id={task_id}, user_id={user_id}")
                return

            text = (f"üì¨ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n\n"
                    f"–°—Ç—É–¥–µ–Ω—Ç: {submission['full_name']}\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {submission['title']}\n\n"
                    f"–¢–µ–∫—Å—Ç: {submission['content'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

            admin_kb = InlineKeyboardBuilder()
            admin_kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{task_id}_{user_id}")
            admin_kb.button(text="‚ùå –í–µ—Ä–Ω—É—Ç—å", callback_data=f"reject_{task_id}_{user_id}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            if submission['file_id']:
                files = submission['file_id'].split(',')
                media = MediaGroupBuilder()
                
                for idx, file in enumerate(files):
                    file_type, file_id = file.split(":", 1)
                    if idx == 0:  # –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        if file_type == "doc":
                            await bot.send_document(
                                ADMIN_ID, 
                                document=file_id, 
                                caption=text,
                                reply_markup=admin_kb.as_markup()
                            )
                        elif file_type == "photo":
                            await bot.send_photo(
                                ADMIN_ID,
                                photo=file_id,
                                caption=text,
                                reply_markup=admin_kb.as_markup()
                            )
                    else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
                        if file_type == "doc":
                            media.add_document(document=file_id)
                        elif file_type == "photo":
                            media.add_photo(photo=file_id)
                
                if len(files) > 1:
                    await bot.send_media_group(ADMIN_ID, media=media.build())
            else:
                await bot.send_message(
                    ADMIN_ID,
                    text,
                    reply_markup=admin_kb.as_markup()
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è\nTask: {task_id}\nUser: {user_id}"
        )

@dp.callback_query(F.data.startswith("accept_") | F.data.startswith("reject_"))
async def handle_submission_review(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) != 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        action, task_id_str, user_id_str = parts
        
        try:
            task_id = int(task_id_str)
            user_id = int(user_id_str)
        except ValueError:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            return

        new_status = "accepted" if action == "accept" else "rejected"

        with Database() as cursor:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–∏—è
            cursor.execute(
                "UPDATE submissions SET status = ? WHERE task_id = ? AND user_id = ?",
                (new_status, task_id, user_id)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cursor.execute(
                "SELECT title FROM tasks WHERE task_id = ?",
                (task_id,)
            )
            task_title = cursor.fetchone()['title']

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = (
            f"üì¢ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é \"{task_title}\" "
            f"{'–ø—Ä–∏–Ω—è—Ç–æ ‚úÖ' if action == 'accept' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå'}."
        )
        try:
            await bot.send_message(user_id, user_message)
        except exceptions.TelegramForbiddenError:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await callback.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

### BLOCK 10: ADMIN TASK REVIEW ###
@dp.callback_query(F.data.startswith("accept_"))
async def accept_solution(callback: types.CallbackQuery):
    _, task_id, user_id = map(int, callback.data.split("_"))
    
    with Database() as cursor:
        cursor.execute(
            "UPDATE submissions SET status = 'accepted', score = 5 "
            "WHERE task_id = ? AND user_id = ?",
            (task_id, user_id)
        )
    
    await callback.message.edit_text("‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
    await bot.send_message(
        user_id,
        "üéâ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –û—Ü–µ–Ω–∫–∞: 5/5\n–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é!"
    )

@dp.callback_query(F.data.startswith("reject_"))
async def reject_solution(callback: types.CallbackQuery):
    _, task_id, user_id = map(int, callback.data.split("_"))
    
    with Database() as cursor:
        cursor.execute(
            "UPDATE submissions SET status = 'rejected' "
            "WHERE task_id = ? AND user_id = ?",
            (task_id, user_id)
        )
    
    await callback.message.edit_text("üîÑ –†–µ—à–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")
    await bot.send_message(
        user_id,
        "‚ö†Ô∏è –†–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ."
    )

        ### BLOCK 10: ADMIN TASK REVIEW ###
@dp.callback_query(F.data.startswith("accept_"))
async def accept_solution(callback: types.CallbackQuery):
    _, task_id, user_id = callback.data.split("_")
    
    with Database() as cursor:
        cursor.execute(
            "UPDATE submissions SET status = 'accepted', score = 5 "
            "WHERE task_id = ? AND user_id = ?",
            (int(task_id), int(user_id))
        )
    
    await callback.message.edit_text("‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
    await bot.send_message(
        user_id,
        "üéâ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –û—Ü–µ–Ω–∫–∞: 5/5\n"
        "–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é!"
    )

@dp.callback_query(F.data.startswith("reject_"))
async def reject_solution(callback: types.CallbackQuery):
    _, task_id, user_id = callback.data.split("_")
    
    with Database() as cursor:
        cursor.execute(
            "UPDATE submissions SET status = 'rejected' "
            "WHERE task_id = ? AND user_id = ?",
            (int(task_id), int(user_id))
        )
    
    await callback.message.edit_text("üîÑ –†–µ—à–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")
    await bot.send_message(
        user_id,
        "‚ö†Ô∏è –†–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
    )

    ### BLOCK 11: ADMIN PANEL ###
ADMIN_COMMANDS = [
    ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
    ("üìù –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "add_course"),
    ("üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å", "delete_course"),
    ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å", "add_module"),
    ("üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "add_task"),
    ("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "list_users"),
    ("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
]


### BLOCK 11: ADMIN PANEL ###
def admin_menu():
    builder = ReplyKeyboardBuilder()
    for text, _ in ADMIN_COMMANDS:
        builder.button(text=text)
    builder.adjust(2, 2, 1)
    return builder.as_markup(resize_keyboard=True)

@dp.callback_query(F.data == "cancel")
async def admin_cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer(
        "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=admin_menu()
    )

@dp.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    if message.from_user.id != int(ADMIN_ID):
        return
    
    with Database() as cursor:
        cursor.execute('''
            SELECT u.user_id, u.full_name, c.title, COUNT(s.task_id) 
            FROM users u
            LEFT JOIN courses c ON u.current_course = c.course_id
            LEFT JOIN submissions s ON u.user_id = s.user_id
            GROUP BY u.user_id
        ''')
        users = cursor.fetchall()
    
    response = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        response += f"üë§ {user[1]} ({user[0]})\n"
        response += f"–ö—É—Ä—Å: {user[2] or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
        response += f"–†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user[3]}\n\n"
    
    await message.answer(response)

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id != int(ADMIN_ID):
        return
    
    with Database() as cursor:
        cursor.execute('''
            SELECT c.title, COUNT(DISTINCT m.module_id), COUNT(DISTINCT t.task_id), COUNT(s.submission_id)
            FROM courses c
            LEFT JOIN modules m ON c.course_id = m.course_id
            LEFT JOIN tasks t ON m.module_id = t.module_id
            LEFT JOIN submissions s ON t.task_id = s.task_id
            GROUP BY c.course_id
        ''')
        stats = cursor.fetchall()
    
    response = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:\n\n"
    for stat in stats:
        response += f"üìö {stat[0]}\n"
        response += f"–ú–æ–¥—É–ª–µ–π: {stat[1]}\n"
        response += f"–ó–∞–¥–∞–Ω–∏–π: {stat[2]}\n"
        response += f"–†–µ—à–µ–Ω–∏–π: {stat[3]}\n\n"
    
    await message.answer(response)

@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    if message.from_user.id != int(ADMIN_ID):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    try:
        with Database() as cursor:
            cursor.execute("SELECT 1 FROM courses LIMIT 1")
            
        await message.answer(
            "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=admin_menu()
        )
    except sqlite3.OperationalError as e:
        logger.error(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Admin panel error: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    ### BLOCK 12: COURSE CREATION ###
@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course_start(message: types.Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID):
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:",
        reply_markup=cancel_button()
    )
    await state.set_state(AdminForm.add_course_title)

@dp.message(AdminForm.add_course_title)
async def process_course_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(AdminForm.add_course_description)

@dp.message(AdminForm.add_course_description)
async def process_course_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –∫—É—Ä—Å–∞ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
    await state.set_state(AdminForm.add_course_media)

@dp.message(AdminForm.add_course_media, F.content_type.in_({'photo', 'document'}))
async def process_course_media(message: types.Message, state: FSMContext):
    media_id = await handle_media(message, state)
    data = await state.get_data()
    
    try:
        with Database() as cursor:
            cursor.execute(
                "INSERT INTO courses (title, description, media_id) VALUES (?, ?, ?)",
                (data['title'], data['description'], media_id)
            )
        
        await message.answer(
            f"‚úÖ –ö—É—Ä—Å '{data['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=admin_menu()
        )
    
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    await state.clear()

@dp.message(AdminForm.add_course_media, Command('skip'))
async def skip_course_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    with Database() as cursor:
        cursor.execute(
            "INSERT INTO courses (title, description) VALUES (?, ?)",
            (data['title'], data['description'])
        )
    
    await message.answer(
        f"‚úÖ –ö—É—Ä—Å '{data['title']}' —Å–æ–∑–¥–∞–Ω –±–µ–∑ –º–µ–¥–∏–∞!",
        reply_markup=admin_menu()
    )
    await state.clear()

### BLOCK 11.1: COURSE DELETION SYSTEM ###
def delete_courses_kb():
    with Database() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=f"‚ùå {course['title']}",
            callback_data=f"delete_course_{course['course_id']}"
        )
    builder.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
async def delete_course_start(message: Message):
    if message.from_user.id != int(ADMIN_ID):
        return
    
    with Database() as cursor:
        cursor.execute("SELECT COUNT(*) FROM courses")
        if cursor.fetchone()[0] == 0:
            return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    await message.answer(
        "üìõ –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=delete_courses_kb()
    )

@dp.callback_query(F.data.startswith("delete_course_"))
async def confirm_course_deletion(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    
    with Database() as cursor:
        cursor.execute(
            "SELECT title FROM courses WHERE course_id = ?",
            (course_id,)
        )
        course_title = cursor.fetchone()[0]
    
    await state.update_data(course_id=course_id)
    
    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.button(text="‚ö†Ô∏è –£–î–ê–õ–ò–¢–¨", callback_data=f"confirm_delete_{course_id}")
    confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        f"üö® –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å?\n"
        f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {course_title}\n"
        f"‚ùóÔ∏è–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_kb.as_markup()
    )
    await state.set_state(AdminForm.delete_course)

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def execute_course_deletion(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    
    try:
        with Database() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
            cursor.execute(
                "SELECT title FROM courses WHERE course_id = ?",
                (course_id,)
            )
            course_title = cursor.fetchone()[0]
            
            # –£–¥–∞–ª—è–µ–º –∫—É—Ä—Å
            cursor.execute(
                "DELETE FROM courses WHERE course_id = ?",
                (course_id,)
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –ö—É—Ä—Å '{course_title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
            f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏ –∑–∞–¥–∞–Ω–∏—è —Ç–∞–∫–∂–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with Database() as cursor:
            cursor.execute(
                "SELECT user_id FROM users WHERE current_course = ?",
                (course_id,)
            )
            users = cursor.fetchall()
            
            for user in users:
                try:
                    await bot.send_message(
                        user['user_id'],
                        f"üì¢ –ö—É—Ä—Å '{course_title}' –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞")
    finally:
        await state.clear()

    ### BLOCK 13: MODULE MANAGEMENT ###
def courses_for_modules_kb():
    with Database() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=course[1],
            callback_data=f"addmod_{course[0]}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å")
async def add_module_start(message: types.Message, state: FSMContext):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –º–æ–¥—É–ª—è:",
        reply_markup=courses_for_modules_kb()
    )

@dp.callback_query(F.data.startswith("addmod_"))
async def select_course_for_module(callback: types.CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[1])
    await state.update_data(course_id=course_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:")
    await state.set_state(AdminForm.add_module_title)

@dp.message(AdminForm.add_module_title)
async def process_module_title(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    try:
        with Database() as cursor:
            cursor.execute(
                "INSERT INTO modules (course_id, title) VALUES (?, ?)",
                (data['course_id'], message.text)
            )
        
        await message.answer(
            f"‚úÖ –ú–æ–¥—É–ª—å '{message.text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=admin_menu()
        )
    
    except Exception as e:
        logger.error(f"Module creation error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥—É–ª—è!")
    
    await state.clear()

def courses_for_tasks_kb():
    with Database() as cursor:
        cursor.execute("SELECT course_id, title FROM courses")
        courses = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=course[1],
            callback_data=f"addtask_{course[0]}"
        )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()

def modules_for_tasks_kb(course_id: int):
    with Database() as cursor:
        cursor.execute(
            "SELECT module_id, title FROM modules WHERE course_id = ?",
            (course_id,)
        )
        modules = cursor.fetchall()
    
    builder = InlineKeyboardBuilder()
    for module in modules:
        builder.button(
            text=module[1],
            callback_data=f"adm_mod_{module[0]}"  # Changed prefix
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tasks_menu")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(F.text == "üìå –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def add_task_start(message: Message):
    if message.from_user.id != int(ADMIN_ID):
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=courses_for_tasks_kb()
    )

@dp.callback_query(F.data.startswith("addtask_"))
async def select_course_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID):
        return
    
    try:
        course_id = int(callback.data.split("_")[1])
        await state.update_data(course_id=course_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
        with Database() as cursor:
            cursor.execute(
                "SELECT COUNT(*) FROM modules WHERE course_id = ?",
                (course_id,)
            )
            if cursor.fetchone()[0] == 0:
                await callback.answer("‚ùå –í –∫—É—Ä—Å–µ –Ω–µ—Ç –º–æ–¥—É–ª–µ–π!")
                return await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ")

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:",
            reply_markup=modules_for_tasks_kb(course_id)
        )
        
    except Exception as e:
        logger.error(f"Course select error: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞")

@dp.callback_query(F.data.startswith("adm_mod_"))
async def select_module_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID):
        return
    
    try:
        module_id = int(callback.data.split("_")[2])  # New index
        await state.update_data(module_id=module_id)
        
        with Database() as cursor:
            cursor.execute(
                "SELECT title FROM modules WHERE module_id = ?",
                (module_id,)
            )
            module_title = cursor.fetchone()[0]

        await callback.message.answer(
            f"üìå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è: {module_title}\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminForm.add_task_title)
        
    except Exception as e:
        logger.error(f"Module select error: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è")

@dp.callback_query(F.data == "back_to_tasks_menu")
async def back_to_tasks_handler(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=courses_for_tasks_kb()
        )
    except TelegramBadRequest:
        await callback.answer("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")

@dp.callback_query(F.data.startswith("admin_module_"))
async def select_module_for_task(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID):
        return
    module_id = int(callback.data.split("_")[-1])
    await state.update_data(module_id=module_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_task_title)

@dp.message(AdminForm.add_task_title)
async def process_task_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AdminForm.add_task_content)

@dp.message(AdminForm.add_task_content)
async def process_task_content(message: Message, state: FSMContext):
    await state.update_data(content=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /skip")
    await state.set_state(AdminForm.add_task_media)

@dp.message(AdminForm.add_task_media, F.content_type.in_({'photo', 'document'}))
async def process_task_media(message: Message, state: FSMContext):
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    await state.update_data(file_id=file_id)
    await finalize_task(message, state)

@dp.message(AdminForm.add_task_media, Command("skip"))
async def skip_task_media(message: Message, state: FSMContext):
    await state.update_data(file_id=None)
    await finalize_task(message, state)

async def finalize_task(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        with Database() as cursor:
            cursor.execute(
                "INSERT INTO tasks (module_id, title, content, file_id) VALUES (?, ?, ?, ?)",
                (data['module_id'], data['title'], data['content'], data.get('file_id')))
        await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=admin_menu())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await state.clear()

   ### BLOCK 15 (UPDATED): STARTUP ###
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        dp.run_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:

        pass  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
